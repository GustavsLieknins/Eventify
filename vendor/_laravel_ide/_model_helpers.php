<?php

namespace App\Models {

  /**
   * App\Models\BookmarkedTrip
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property array|null $hotels
   * @property array|null $flights
   * @property string|null $title
   * @property mixed $user_id
   * @property int $id
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereTitle($value)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereFlights($value)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereHotels($value)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip query()
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static BookmarkedTrip|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip clone()
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static BookmarkedTrip|null first(array|string $columns)
   * @method static BookmarkedTrip firstOrFail(array|string $columns, string|null $message)
   * @method static BookmarkedTrip sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<BookmarkedTrip>|BookmarkedTrip tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class BookmarkedTrip extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\SearchLog
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string $ip
   * @property string $query
   * @property mixed $user_id
   * @property int $id
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereQuery($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereIp($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog query()
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static SearchLog|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog clone()
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static SearchLog|null first(array|string $columns)
   * @method static SearchLog firstOrFail(array|string $columns, string|null $message)
   * @method static SearchLog sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<SearchLog>|SearchLog tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class SearchLog extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\ShareLink
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property mixed $opens
   * @property \Illuminate\Support\Carbon|null $expires_at
   * @property mixed $trip_id
   * @property mixed $user_id
   * @property string $slug
   * @property int $id
   * @property-read \App\Models\BookmarkedTrip $trip
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereSlug($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereTripId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereExpiresAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereOpens($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink query()
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static ShareLink|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink clone()
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static ShareLink|null first(array|string $columns)
   * @method static ShareLink firstOrFail(array|string $columns, string|null $message)
   * @method static ShareLink sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLink>|ShareLink tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class ShareLink extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\ShareLinkVisit
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $user_agent
   * @property string $ip
   * @property string|null $country
   * @property mixed $user_id
   * @property mixed $share_link_id
   * @property int $id
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereShareLinkId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereCountry($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereIp($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereUserAgent($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit query()
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static ShareLinkVisit|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit clone()
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static ShareLinkVisit|null first(array|string $columns)
   * @method static ShareLinkVisit firstOrFail(array|string $columns, string|null $message)
   * @method static ShareLinkVisit sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<ShareLinkVisit>|ShareLinkVisit tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class ShareLinkVisit extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\User
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $remember_token
   * @property integer $role
   * @property string $password
   * @property \Illuminate\Support\Carbon|null $email_verified_at
   * @property string $email
   * @property string $name
   * @property int $id
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \Illuminate\Notifications\DatabaseNotification> $notifications
   * @property-read int|null $notifications_count
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereEmail($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereEmailVerifiedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User wherePassword($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRole($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRememberToken($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User query()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static User|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User clone()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static User|null first(array|string $columns)
   * @method static User firstOrFail(array|string $columns, string|null $message)
   * @method static User sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class User extends \Illuminate\Foundation\Auth\User
  {
    //
  }

  /**
   * App\Models\VisitLog
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property array|null $meta
   * @property string|null $user_agent
   * @property string $ip
   * @property string|null $region
   * @property string|null $city
   * @property float|null $lng
   * @property float|null $lat
   * @property string|null $country
   * @property string|null $referrer
   * @property string $path
   * @property mixed $user_id
   * @property int $id
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog wherePath($value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereReferrer($value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereCountry($value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereLat($value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereLng($value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereCity($value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereRegion($value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereIp($value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereUserAgent($value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereMeta($value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog query()
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static VisitLog|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog clone()
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static VisitLog|null first(array|string $columns)
   * @method static VisitLog firstOrFail(array|string $columns, string|null $message)
   * @method static VisitLog sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<VisitLog>|VisitLog tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class VisitLog extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

}